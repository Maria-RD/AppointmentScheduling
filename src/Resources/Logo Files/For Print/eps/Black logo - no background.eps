%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2370 636
%%HiResBoundingBox: 0 0 2370 636
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2370 636 re
W
q
[0.24 0 0 -0.24 0 636] cm
q
0 0 9875 2646.875 re
W*
q
[35.659122 0 0 35.681107 223.63191 258.4191] cm
30.299999 45.900002 m
30.299999 37.200001 l
38.900002 37.200001 l
38.900002 30.6 l
30.299999 30.6 l
30.299999 21.9 l
23.4 21.9 l
23.4 30.6 l
14.9 30.6 l
14.9 37.400002 l
23.6 37.400002 l
23.6 45.900002 l
30.299999 45.900002 l
h
f
61.400002 6.9 m
60.5 6.1 59.400002 5.5 58.400002 5 c
58.300003 4.9 58.200001 4.9 58.100002 4.8 c
57.5 4.4 56.700001 4 56 4 c
55.599998 4 55.299999 4.1 55 4.3 c
54.200001 4.9 53.799999 5.6 53.799999 6.4 c
53.900002 7 54.299999 7.6 55.099998 8 c
55.399998 8.1 55.599998 8.2 55.899998 8.2 c
56.299999 8.2 56.699997 8.099999 56.999996 7.9 c
57.299995 7.8 57.499996 7.7 57.799995 7.7 c
58.499996 7.7 59.299995 8.599999 59.999996 10.1 c
60.899998 12.200001 59.899998 14.700001 58.999996 16.900002 c
58.799995 17.400002 58.599995 17.900002 58.399998 18.400002 c
57.599998 20.500002 56.799999 22.700001 55.999996 24.800001 c
55.399998 25.1 54.999996 25.6 54.899998 26.300001 c
54.199997 30.800001 51.899998 31.200001 51.199997 31.200001 c
51.199997 31.200001 51.099998 31.200001 51.099998 31.200001 c
51 31.200001 l
49.900002 31.200001 49 30.400002 48.299999 29 c
48 28.5 l
47.5 27.4 47.299999 26.4 47.299999 26.299999 c
47.200001 25.699999 46.899998 25.299999 46.399998 25 c
46.399998 24.9 46.299999 24.700001 46.199997 24.6 c
45.099998 21.5 43.599998 17.400002 42.299995 13.3 c
41.699997 11.4 42.199997 9.700001 43.699997 8.3 c
44.099998 8 44.499996 7.7 44.899998 7.8 c
45.099998 7.8 45.199997 7.9 45.399998 8 c
45.699997 8.1 45.999996 8.3 46.399998 8.3 c
46.499996 8.3 l
47.699997 8.3 48.899998 7.5 48.899998 6.2 c
48.899998 5.6 48.699997 5.1 48.299999 4.7 c
47.899998 4.3 47.399998 4.1 46.700001 4.2 c
46.100002 4.2 45.600002 4.4 45.100002 4.6 c
44.800003 4.7 44.500004 4.8 44.200001 4.900001 c
42.5 5.300001 41.100002 6.500001 40.200001 8.1 c
39.200001 10 38.900002 12.3 39.600002 14.400001 c
40.800003 18.1 42.100002 22 43.400002 26 c
43.300003 26.299999 43.200001 26.700001 43.300003 27.1 c
43.500004 28.200001 43.800003 29.200001 44.200005 30.200001 c
44.900005 31.800001 46.000004 33.400002 47.600006 34.400002 c
48.000008 34.600002 48.400005 34.800003 48.800007 35 c
49.200008 35 l
49.200008 35.700001 49.10001 36.400002 49.000008 37.099998 c
48.700001 41 47 44.799999 44.5 48 c
39.5 54.200001 31.799999 57.299999 24 56.200001 c
21.6 55.900002 19.299999 55.200001 17.200001 54.200001 c
16.200001 53.700001 l
15.6 53.799999 l
14.6 54 l
13.700001 54.299999 12.900001 54.5 12 54.599998 c
11.7 54.699997 11.4 54.699997 11.1 54.699997 c
10.6 54.799995 l
9.200001 54.999996 7.6 54.999996 5.8 54.699997 c
5.6 54.699997 l
5.3 54.699997 5.1 54.599998 4.900001 54.599998 c
7.700001 51.799999 l
8.000001 51.5 8.200001 51.299999 8.400001 51.099998 c
10.1 49.099998 l
8.6 47 l
5.3 42.299999 3.8 36.599998 4.6 30.9 c
5.1 26.799999 6.8 23 9.400001 19.799999 c
13.300001 14.999999 18.6 12.099999 24.6 11.499999 c
25.300001 12.899999 26.800001 13.999999 28.5 13.999999 c
30.9 13.999999 32.799999 12.099999 32.799999 9.699999 c
32.799999 7.299999 30.9 5.399999 28.5 5.399999 c
26.700001 5.399999 25.200001 6.499999 24.5 7.999999 c
17.4 8.599999 11 11.999998 6.5 17.699999 c
3.5 21.4 1.6 25.899998 1 30.599998 c
0.1 37.099998 1.7 43.699997 5.5 49.099998 c
5.4 49.199997 5.3 49.299999 5.2 49.399998 c
2 52.5 l
1.1 53.400002 0.8 54.599998 1.1 55.700001 c
1.6 57.100002 2.9 58 5.2 58.299999 c
5.4 58.299999 l
7.5 58.599998 9.4 58.599998 11.099999 58.399998 c
11.499999 58.299999 l
11.799999 58.299999 12.199999 58.200001 12.599999 58.200001 c
13.599999 58 14.5 57.799999 15.5 57.5 c
17.9 58.700001 20.6 59.5 23.299999 59.799999 c
24.6 60 25.799999 60 27 60 c
34.799999 60 42.200001 56.5 47.299999 50.200001 c
50.299999 46.5 52.200001 42 52.799999 37.300003 c
52.899998 36.400002 53 35.600002 53 34.700005 c
54.400002 34.400005 55.799999 33.300003 56.599998 32.200005 c
57.799999 30.700005 58.399998 28.700005 58.799999 26.800005 c
58.799999 26.500006 58.799999 26.200005 58.799999 26.000006 c
58.899998 25.600006 59.099998 25.200006 59.200001 24.700006 c
59.700001 23.200006 60.299999 21.600006 60.799999 20.100006 c
61.399998 18.300007 62.099998 16.500006 62.700001 14.600006 c
63 13.800006 63.200001 12.800006 63.200001 11.800006 c
63.299999 9.8 62.599998 8 61.400002 6.9 c
h
f
Q
q
[50.011806 0 0 50.042637 3077.8921 722.61993] cm
8.72 17.52 m
4.22 17.52 l
3.34 20 l
0.08 20 l
4.980001 7.76 l
7.980001 7.76 l
12.880001 20 l
9.600001 20 l
8.72 17.52 l
h
5.2 14.74 m
7.74 14.74 l
6.48 11.18 l
5.2 14.74 l
h
16.959999 15 m
16.959999 16.479999 17.699999 17.32 19.199999 17.32 c
19.619999 17.32 19.999998 17.26 20.299999 17.119999 c
20.859999 16.9 21.24 16.479999 21.439999 15.899999 c
21.519999 15.619999 21.559999 15.319999 21.559999 14.999999 c
21.559999 14.679999 21.519999 14.379999 21.439999 14.099999 c
21.219999 13.48 20.879999 13.139999 20.299999 12.86 c
20 12.74 19.619999 12.679999 19.199999 12.679999 c
17.699999 12.679999 16.959999 13.52 16.959999 14.999999 c
16.959999 15 l
h
16.959999 19 m
16.959999 24 l
13.959999 24 l
13.959999 15 l
13.959999 11.8 16.219999 9.9 19.24 9.9 c
22.32 9.9 24.559999 11.92 24.559999 14.98 c
24.559999 17.82 22.42 20.099998 19.58 20.099998 c
19 20.099998 18.5 19.999998 18.08 19.799999 c
17.639999 19.619999 17.26 19.34 16.959999 19 c
h
28.959999 15 m
28.959999 16.479999 29.699999 17.32 31.199999 17.32 c
31.619999 17.32 31.999998 17.26 32.299999 17.119999 c
32.860001 16.9 33.239998 16.479999 33.439999 15.899999 c
33.52 15.619999 33.559998 15.319999 33.559998 14.999999 c
33.559998 14.679999 33.519997 14.379999 33.439999 14.099999 c
33.219997 13.48 32.879997 13.139999 32.299999 12.86 c
32 12.74 31.619999 12.679999 31.199999 12.679999 c
29.699999 12.679999 28.959999 13.52 28.959999 14.999999 c
28.959999 15 l
h
28.959999 19 m
28.959999 24 l
25.959999 24 l
25.959999 15 l
25.959999 11.8 28.219999 9.9 31.24 9.9 c
34.32 9.9 36.560001 11.92 36.560001 14.98 c
36.560001 17.82 34.420002 20.099998 31.580002 20.099998 c
31.000002 20.099998 30.500002 19.999998 30.080002 19.799999 c
29.640001 19.619999 29.260002 19.34 28.960001 19 c
28.959999 19 l
h
42.68 17.32 m
44.139999 17.32 44.98 16.459999 44.98 15 c
44.98 13.540001 44.139999 12.68 42.68 12.68 c
41.220001 12.68 40.380001 13.54 40.380001 15 c
40.380001 16.459999 41.220001 17.32 42.68 17.32 c
h
42.68 20.1 m
39.599998 20.1 37.380001 18.060001 37.380001 15 c
37.380001 11.84 39.68 9.9 42.68 9.9 c
45.779999 9.9 47.98 11.94 47.98 15 c
47.98 18.139999 45.66 20.1 42.68 20.1 c
h
49.299999 10 m
52.299999 10 l
52.299999 20 l
49.299999 20 l
49.299999 10 l
h
50.799999 9.06 m
49.779999 9.06 49.059998 8.34 49.059998 7.320001 c
49.059998 6.280001 49.779999 5.6 50.799999 5.6 c
51.84 5.6 52.52 6.28 52.52 7.320001 c
52.52 8.380001 51.860001 9.06 50.799999 9.06 c
h
64.599998 15 m
64.599998 20 l
61.599998 20 l
61.599998 15 l
61.599998 13.62 60.959999 12.68 59.5 12.68 c
58.060001 12.68 57.400002 13.64 57.400002 15 c
57.400002 20 l
54.400002 20 l
54.400002 15 l
54.400002 11.92 56.52 9.9 59.5 9.9 c
62.599998 9.9 64.599998 12.02 64.599998 15 c
h
72.080002 10.34 m
72.080002 13.12 l
69.279999 13.12 l
69.279999 15 l
69.279999 16.540001 70.299995 17.32 71.779999 17.32 c
71.959999 17.32 72.119995 17.299999 72.260002 17.279999 c
72.400009 17.259998 72.520004 17.239998 72.660004 17.219999 c
72.660004 20 l
72.480003 20.02 72.340004 20.059999 72.240005 20.08 c
72.120003 20.1 71.920006 20.1 71.660004 20.1 c
68.640007 20.1 66.280006 18.040001 66.280006 15 c
66.280006 7.6 l
69.280006 7.6 l
69.280006 10.34 l
72.080009 10.34 l
72.080002 10.34 l
h
90.199997 14.6 m
90.199997 20 l
87.199997 20 l
87.199997 14.6 l
87.199997 13.46 86.659996 12.68 85.459999 12.68 c
84.279999 12.68 83.699997 13.480001 83.699997 14.6 c
83.699997 20 l
80.699997 20 l
80.699997 14.6 l
80.699997 13.46 80.119995 12.68 78.919998 12.68 c
77.739998 12.68 77.199997 13.480001 77.199997 14.6 c
77.199997 20 l
74.199997 20 l
74.199997 14.6 l
74.199997 11.700001 76.18 9.900001 78.959999 9.900001 c
80.379997 9.900001 81.479996 10.56 82.199997 11.780001 c
82.919998 10.56 84.019997 9.900001 85.439995 9.900001 c
88.319992 9.900001 90.199997 11.800001 90.199997 14.6 c
h
94.739998 13.8 m
95.040001 13.900001 95.379997 13.980001 95.739998 14.020001 c
96.099998 14.080001 96.439995 14.1 96.759995 14.1 c
97.159996 14.1 98.179993 14.020001 98.179993 13.440001 c
98.179993 12.820001 97.299995 12.8 96.859993 12.8 c
95.979996 12.8 95.219994 13 94.73999 13.8 c
94.739998 13.8 l
h
100.400002 16.879999 m
100.400002 19.679998 l
99.279999 19.939999 98.160004 20.119999 97 20.119999 c
93.82 20.119999 91.459999 18.259998 91.459999 15.039999 c
91.459999 11.859999 93.739998 9.9 96.760002 9.9 c
98.82 9.9 101.200005 10.879999 101.200005 13.219999 c
101.200005 15.539999 98.680008 16.4 96.740005 16.4 c
96.000008 16.4 95.260002 16.199999 94.580002 15.92 c
94.980003 17.040001 96.18 17.219999 97.220001 17.219999 c
97.760002 17.219999 98.300003 17.199999 98.840004 17.119999 c
99.340004 17.079998 99.920006 17.019999 100.400002 16.879999 c
h
112.879997 15 m
112.879997 20 l
109.879997 20 l
109.879997 15 l
109.879997 13.62 109.239998 12.68 107.779999 12.68 c
106.339996 12.68 105.68 13.64 105.68 15 c
105.68 20 l
102.68 20 l
102.68 15 l
102.68 11.92 104.800003 9.9 107.779999 9.9 c
110.879997 9.9 112.879997 12.02 112.879997 15 c
h
120.360001 10.34 m
120.360001 13.12 l
117.559998 13.12 l
117.559998 15 l
117.559998 16.540001 118.579994 17.32 120.059998 17.32 c
120.239998 17.32 120.399994 17.299999 120.540001 17.279999 c
120.680008 17.259998 120.800003 17.239998 120.940002 17.219999 c
120.940002 20 l
120.760002 20.02 120.620003 20.059999 120.520004 20.08 c
120.400002 20.1 120.200005 20.1 119.940002 20.1 c
116.920006 20.1 114.560005 18.040001 114.560005 15 c
114.560005 7.6 l
117.560005 7.6 l
117.560005 10.34 l
120.360008 10.34 l
120.360001 10.34 l
h
122.019997 19.68 m
122.019997 16.880001 l
123.339996 17.280001 125 17.360001 126.360001 17.360001 c
126.900002 17.360001 127.32 17.34 127.620003 17.280001 c
127.900002 17.24 128.040009 17.140001 128.040009 17 c
128.040009 16.940001 128.020004 16.9 127.980011 16.84 c
127.780014 16.639999 127.340012 16.540001 127.080009 16.479999 c
126.820007 16.419998 126.480011 16.34 126.060013 16.26 c
125.720016 16.200001 125.320015 16.120001 124.860016 16.02 c
123.300018 15.68 122.100014 14.8 122.100014 13.120001 c
122.100014 10.640001 124.520012 9.900001 126.560013 9.900001 c
127.840012 9.900001 129.12001 10.080001 130.38002 10.34 c
130.38002 13.16 l
129.120026 12.78 127.70002 12.68 126.38002 12.68 c
125.860023 12.68 125.500023 12.700001 125.280022 12.76 c
125.06002 12.82 124.940025 12.92 124.940025 13.04 c
124.940025 13.22 125.120026 13.34 125.460022 13.4 c
125.800018 13.48 126.280022 13.58 126.860023 13.679999 c
127.38002 13.78 127.88002 13.879999 128.360016 13.999999 c
129.840012 14.379999 130.900009 15.179999 130.900009 16.779999 c
130.900009 19.459999 128.200012 20.119999 126.040009 20.119999 c
124.680008 20.119999 123.340012 19.939999 122.020012 19.679998 c
122.019997 19.68 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
